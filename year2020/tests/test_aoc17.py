from inspect import cleandoc

import pytest

from year2020.aoc17 import State, solve

input_1 = cleandoc("""
    .#.
    ..#
    ###
""")

report_1 = cleandoc("""
    Before any cycles:

    z=0
    .#.
    ..#
    ###


    After 1 cycle:

    z=-1
    #..
    ..#
    .#.

    z=0
    #.#
    .##
    .#.

    z=1
    #..
    ..#
    .#.


    After 2 cycles:

    z=-2
    .....
    .....
    ..#..
    .....
    .....

    z=-1
    ..#..
    .#..#
    ....#
    .#...
    .....

    z=0
    ##...
    ##...
    #....
    ....#
    .###.

    z=1
    ..#..
    .#..#
    ....#
    .#...
    .....

    z=2
    .....
    .....
    ..#..
    .....
    .....


    After 3 cycles:

    z=-2
    .......
    .......
    ..##...
    ..###..
    .......
    .......
    .......

    z=-1
    ..#....
    ...#...
    #......
    .....##
    .#...#.
    ..#.#..
    ...#...

    z=0
    ...#...
    .......
    #......
    .......
    .....##
    .##.#..
    ...#...

    z=1
    ..#....
    ...#...
    #......
    .....##
    .#...#.
    ..#.#..
    ...#...

    z=2
    .......
    .......
    ..##...
    ..###..
    .......
    .......
    .......
""")

report_2 = cleandoc("""
    Before any cycles:

    z=0, w=0
    .#.
    ..#
    ###


    After 1 cycle:

    z=-1, w=-1
    #..
    ..#
    .#.

    z=0, w=-1
    #..
    ..#
    .#.

    z=1, w=-1
    #..
    ..#
    .#.

    z=-1, w=0
    #..
    ..#
    .#.

    z=0, w=0
    #.#
    .##
    .#.

    z=1, w=0
    #..
    ..#
    .#.

    z=-1, w=1
    #..
    ..#
    .#.

    z=0, w=1
    #..
    ..#
    .#.

    z=1, w=1
    #..
    ..#
    .#.


    After 2 cycles:

    z=-2, w=-2
    .....
    .....
    ..#..
    .....
    .....

    z=-1, w=-2
    .....
    .....
    .....
    .....
    .....

    z=0, w=-2
    ###..
    ##.##
    #...#
    .#..#
    .###.

    z=1, w=-2
    .....
    .....
    .....
    .....
    .....

    z=2, w=-2
    .....
    .....
    ..#..
    .....
    .....

    z=-2, w=-1
    .....
    .....
    .....
    .....
    .....

    z=-1, w=-1
    .....
    .....
    .....
    .....
    .....

    z=0, w=-1
    .....
    .....
    .....
    .....
    .....

    z=1, w=-1
    .....
    .....
    .....
    .....
    .....

    z=2, w=-1
    .....
    .....
    .....
    .....
    .....

    z=-2, w=0
    ###..
    ##.##
    #...#
    .#..#
    .###.

    z=-1, w=0
    .....
    .....
    .....
    .....
    .....

    z=0, w=0
    .....
    .....
    .....
    .....
    .....

    z=1, w=0
    .....
    .....
    .....
    .....
    .....

    z=2, w=0
    ###..
    ##.##
    #...#
    .#..#
    .###.

    z=-2, w=1
    .....
    .....
    .....
    .....
    .....

    z=-1, w=1
    .....
    .....
    .....
    .....
    .....

    z=0, w=1
    .....
    .....
    .....
    .....
    .....

    z=1, w=1
    .....
    .....
    .....
    .....
    .....

    z=2, w=1
    .....
    .....
    .....
    .....
    .....

    z=-2, w=2
    .....
    .....
    ..#..
    .....
    .....

    z=-1, w=2
    .....
    .....
    .....
    .....
    .....

    z=0, w=2
    ###..
    ##.##
    #...#
    .#..#
    .###.

    z=1, w=2
    .....
    .....
    .....
    .....
    .....

    z=2, w=2
    .....
    .....
    ..#..
    .....
    .....
""")


def state_to_str(st: State) -> str:
    c_min, c_max = (
        tuple(func(c[i] for c in st.active) for i in range(st.dim))
        for func in (min, max)
    )
    result = ''
    parts = (
        ((z,) for z in range(c_min[2], c_max[2] + 1))
        if st.dim == 3
        else (
            (z, w)
            for w in range(c_min[3], c_max[3] + 1)
            for z in range(c_min[2], c_max[2] + 1)
        )
    )
    for part in parts:
        if len(part) == 1:
            result += f'z={part[0]}\n'
        else:
            result += f'z={part[0]}, w={part[1]}\n'
        for y in range(c_min[1], c_max[1] + 1):
            for x in range(c_min[0], c_max[0] + 1):
                result += '#' if (x, y, *part) in st.active else '.'
            result += '\n'
        result += '\n'
    return result


def full_report(st: State, *, cycles: int) -> str:
    result = 'Before any cycles:\n\n'
    result += state_to_str(st) + '\n'
    for i in range(cycles):
        st.cycle()
        result += f'After {i + 1} cycle{"" if i == 0 else "s"}:\n\n'
        result += state_to_str(st) + '\n'
    return result.rstrip()


@pytest.mark.parametrize('dim, result', ((3, 112), (4, 848)))
def test_cycle(dim, result):
    st = State.from_str(input_1, dim=dim)
    for _ in range(6):
        st.cycle()
    assert len(st.active) == result


@pytest.mark.parametrize(
    'report, dim, cycles', ((report_1, 3, 3), (report_2, 4, 2))
)
def test_full_report(report, dim, cycles):
    st = State.from_str(input_1, dim=dim)
    assert full_report(st, cycles=cycles) == report


def test_solve():
    assert solve() == (267, 1812)
