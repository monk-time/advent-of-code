from itertools import islice

from aoc12 import evolve, pad, parse, sum_of_pots

sample = """initial state: #..#.#..##......###...###

...## => #
..#.. => #
.#... => #
.#.#. => #
.#.## => #
.##.. => #
.#### => #
#.#.# => #
#.### => #
##.#. => #
##.## => #
###.. => #
###.# => #
####. => #"""


def test_parse():
    assert parse(sample) == (
        {'...##', '..#..', '.#...', '.#.#.', '.#.##', '.##..', '.####',
         '#.#.#', '#.###', '##.#.', '##.##', '###..', '###.#', '####.'},
        ('....#..#.#..##......###...###....', 4))


def test_pad():
    assert pad('#...#.', 3) == ('....#...#....', 7)
    assert pad('#...#.', 0) == ('....#...#....', 4)
    assert pad('.#...#.', 0) == ('....#...#....', 3)
    assert pad('..#...#.', 0) == ('....#...#....', 2)
    assert pad('...#...#.', 0) == ('....#...#....', 1)
    assert pad('....#...#.', 0) == ('....#...#....', 0)
    assert pad('.....#...#.', 0) == ('....#...#....', -1)
    assert pad('......#...#.', 0) == ('....#...#....', -2)
    assert pad('....#.#', 0) == ('....#.#....', 0)
    assert pad('....#.#.', 0) == ('....#.#....', 0)
    assert pad('....#.#..', 0) == ('....#.#....', 0)
    assert pad('....#.#...', 0) == ('....#.#....', 0)
    assert pad('....#.#....', 0) == ('....#.#....', 0)
    assert pad('....#.#.....', 0) == ('....#.#....', 0)
    assert pad('...#.#....', 0) == ('....#.#....', 1)
    assert pad('..#.#....', 0) == ('....#.#....', 2)
    assert pad('.#.#....', 0) == ('....#.#....', 3)
    assert pad('#.#....', 0) == ('....#.#....', 4)


def test_evolve():
    rules, state = parse(sample)
    states = list(islice(evolve(rules, *state), 21))  # generations 0-20
    max_i_zero = max(i_zero for _, i_zero in states)
    lines = [(max_i_zero - i_zero) * "." + pots for pots, i_zero in states]
    max_len = max(len(pots) for pots in lines)
    lines = [f'{i:2d}: {pots.ljust(max_len, ".")}' for i, pots in enumerate(lines)]
    assert lines == [
        ' 0: ......#..#.#..##......###...###..............',
        ' 1: ......#...#....#.....#..#..#..#..............',
        ' 2: ......##..##...##....#..#..#..##.............',
        ' 3: .....#.#...#..#.#....#..#..#...#.............',
        ' 4: ......#.#..#...#.#...#..#..##..##............',
        ' 5: .......#...##...#.#..#..#...#...#............',
        ' 6: .......##.#.#....#...#..##..##..##...........',
        ' 7: ......#..###.#...##..#...#...#...#...........',
        ' 8: ......#....##.#.#.#..##..##..##..##..........',
        ' 9: ......##..#..#####....#...#...#...#..........',
        '10: .....#.#..#...#.##....##..##..##..##.........',
        '11: ......#...##...#.#...#.#...#...#...#.........',
        '12: ......##.#.#....#.#...#.#..##..##..##........',
        '13: .....#..###.#....#.#...#....#...#...#........',
        '14: .....#....##.#....#.#..##...##..##..##.......',
        '15: .....##..#..#.#....#....#..#.#...#...#.......',
        '16: ....#.#..#...#.#...##...#...#.#..##..##......',
        '17: .....#...##...#.#.#.#...##...#....#...#......',
        '18: .....##.#.#....#####.#.#.#...##...##..##.....',
        '19: ....#..###.#..#.#.#######.#.#.#..#.#...#.....',
        '20: ....#....##....#####...#######....#.#..##....',
    ]


def test_sum_of_pots():
    rules, state = parse(sample)
    gen20 = next(islice(evolve(rules, *state), 20, None))
    assert sum_of_pots(*gen20) == 325
