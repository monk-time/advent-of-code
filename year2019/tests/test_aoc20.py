from inspect import cleandoc

import pytest

from year2019.aoc20 import TileMap, find_min_path_len, solve


def preserve_whitespace(s: str) -> str:
    """Avoid problems with linters and autoformatting on save."""
    return cleandoc(s).replace('|', '')


sample1 = preserve_whitespace("""
    |     A     |
    |     A     |
    |  ###.###  |
    |  ###.###  |
    |  ## B ##  |
    |  ## B ##  |
    |  ##   ##  |
    |  #######  |
    |BB.......ZZ|
    |  #######  |
""")

sample2 = preserve_whitespace("""
    |         A           |
    |         A           |
    |  #######.#########  |
    |  #######.........#  |
    |  #######.#######.#  |
    |  #######.#######.#  |
    |  #######.#######.#  |
    |  #####  B    ###.#  |
    |BC...##  C    ###.#  |
    |  ##.##       ###.#  |
    |  ##...DE  F  ###.#  |
    |  #####    G  ###.#  |
    |  #########.#####.#  |
    |DE..#######...###.#  |
    |  #.#########.###.#  |
    |FG..#########.....#  |
    |  ###########.#####  |
    |             Z       |
    |             Z       |
""")

sample3 = preserve_whitespace("""
    |                   A               |
    |                   A               |
    |  #################.#############  |
    |  #.#...#...................#.#.#  |
    |  #.#.#.###.###.###.#########.#.#  |
    |  #.#.#.......#...#.....#.#.#...#  |
    |  #.#########.###.#####.#.#.###.#  |
    |  #.............#.#.....#.......#  |
    |  ###.###########.###.#####.#.#.#  |
    |  #.....#        A   C    #.#.#.#  |
    |  #######        S   P    #####.#  |
    |  #.#...#                 #......VT|
    |  #.#.#.#                 #.#####  |
    |  #...#.#               YN....#.#  |
    |  #.###.#                 #####.#  |
    |DI....#.#                 #.....#  |
    |  #####.#                 #.###.#  |
    |ZZ......#               QG....#..AS|
    |  ###.###                 #######  |
    |JO..#.#.#                 #.....#  |
    |  #.#.#.#                 ###.#.#  |
    |  #...#..DI             BU....#..LF|
    |  #####.#                 #.#####  |
    |YN......#               VT..#....QG|
    |  #.###.#                 #.###.#  |
    |  #.#...#                 #.....#  |
    |  ###.###    J L     J    #.#.###  |
    |  #.....#    O F     P    #.#...#  |
    |  #.###.#####.#.#####.#####.###.#  |
    |  #...#.#.#...#.....#.....#.#...#  |
    |  #.#####.###.###.#.#.#########.#  |
    |  #...#.#.....#...#.#.#.#.....#.#  |
    |  #.###.#####.###.###.#.#.#######  |
    |  #.#.........#...#.............#  |
    |  #########.###.###.#############  |
    |           B   J   C               |
    |           U   P   P               |
""")


sample4 = preserve_whitespace("""
    |             Z L X W       C                 |
    |             Z P Q B       K                 |
    |  ###########.#.#.#.#######.###############  |
    |  #...#.......#.#.......#.#.......#.#.#...#  |
    |  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  |
    |  #.#...#.#.#...#.#.#...#...#...#.#.......#  |
    |  #.###.#######.###.###.#.###.###.#.#######  |
    |  #...#.......#.#...#...#.............#...#  |
    |  #.#########.#######.#.#######.#######.###  |
    |  #...#.#    F       R I       Z    #.#.#.#  |
    |  #.###.#    D       E C       H    #.#.#.#  |
    |  #.#...#                           #...#.#  |
    |  #.###.#                           #.###.#  |
    |  #.#....OA                       WB..#.#..ZH|
    |  #.###.#                           #.#.#.#  |
    |CJ......#                           #.....#  |
    |  #######                           #######  |
    |  #.#....CK                         #......IC|
    |  #.###.#                           #.###.#  |
    |  #.....#                           #...#.#  |
    |  ###.###                           #.#.#.#  |
    |XF....#.#                         RF..#.#.#  |
    |  #####.#                           #######  |
    |  #......CJ                       NM..#...#  |
    |  ###.#.#                           #.###.#  |
    |RE....#.#                           #......RF|
    |  ###.###        X   X       L      #.#.#.#  |
    |  #.....#        F   Q       P      #.#.#.#  |
    |  ###.###########.###.#######.#########.###  |
    |  #.....#...#.....#.......#...#.....#.#...#  |
    |  #####.#.###.#######.#######.###.###.#.#.#  |
    |  #.......#.......#.#.#.#.#...#...#...#.#.#  |
    |  #####.###.#####.#.#.#.#.###.###.#.###.###  |
    |  #.......#.....#.#...#...............#...#  |
    |  #############.#.#.###.###################  |
    |               A O F   N                     |
    |               A A D   M                     |
""")


@pytest.mark.parametrize(
    'sample, result',
    (
        (sample1, 8),
        (sample2, 23),
        (sample3, 58),
    ),
)
def test_find_min_path_len(sample, result):
    tile_map = TileMap.from_str(sample)
    assert find_min_path_len(tile_map) == result


@pytest.mark.parametrize(
    'sample, result',
    (
        (sample2, 26),
        (sample4, 396),
    ),
)
def test_find_min_path_len_recursive(sample, result):
    tile_map = TileMap.from_str(sample)
    assert find_min_path_len(tile_map, recursive=True) == result


def test_solve():
    assert solve() == (496, 5886)
